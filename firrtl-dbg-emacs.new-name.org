* firrtl-debugger-emacs
** Headers
*** Purpose

Record the design and development of a FIRRTL debugging interface for emacs

*** History

Begun Thu Apr 30 16:45:04 2020

*** File marks
#+SETUPFILE: ~/.emacs.d/org-setups/design.org
*** Associated files

** Design
** Info
** Issues
** Progress
** Communication
*** Two questions for the dev

In component types, what is the difference between "U" and "PU"?

Is it normal that the GCD example loses some ephemeral components
after it starts?  When I start it, it initially has 6 wires _T thru
_T_5, but after stepping it, it loses all except _T_5.  A similar
thing happens with the _GEN_* wires.

** Notes
*** First things to do

 * [X] Capture "show" output
 * [X] Parse "show" output
   * Registers
   * [X] Circuit state
 * [X] Decide [[id:9282c996-d57a-4556-b167-530cf50a11f5][Whether to start directly]]
 * [X] Startup

*** Plan for general interaction

The registers etc live in a widget tree.

We can pin various ones high, other ones sort as they come out.  Or
just open them.  Maybe some way to save that.

New ones are just captured.

The inputs can be written to manually or programmatically.  poke
inputPortName value and mempoke should be done automatically.

Some button gets us "step; show; "  We may not need peek, mempeek.

We capture circuit info and display it in a different window.

*** Whether to start directly
    :PROPERTIES:
    :ID:       9282c996-d57a-4556-b167-530cf50a11f5
    :END:

We could try to work thru sbt mode.  But that brings in all sorts of
hair.

Starting directly just works.

 : sbt 'test:runMain gcd.GCDRepl'

puts us into the REPL, which we can capture directly.

Even comint mode seems too much.  Just capture into a buffer.

*** Parsing "show" output

(Equivalently "show" or "show state")

 * CircuitState
 * Inputs:
 * Outputs:
 * Registers      :
 * FutureRegisters:
   * Associated to registers
 * Ephemera:
 * Memories

Each register display is of the form Name=Value, separated by ", "
except the last.  Value can be bracketed by "â˜ ".  Inside that, Value
is preceded by whitespace.

Name is dot-separated components.  Each component may be suffixed with
_N indicating part of a vector.

*** type

We'd like to run "type regex" on each thing and associate that to its
name.  But that may take a while.

*** eval

On a thing, to show trace of computation

*** waitfor
waitfor componentName value

Possibly wrt a componentName we point at
*** Other commands
show lofirrtl (We'd just capture it into a buffer)
show input (This would require way more parsing)
reset
randomize (Randomizes inputs, so it overlaps with us)
poison
timing (Shows it)
timing clear
timing bin (Not clear what it does)
Setting flags: {ordered-exec,allow-cycles,eval-all}
load fileName (Loads a whole new file.  We'd better reset)

And that's about it.  Other existing commands are pointless in this
environment.

*** About type

Some sample outputs
 : type _T_5 0.U<1>
 : type x 2.PU<4>
 : type _GEN_3 17368.PU<16>
 : type clock 0.U<1>
 : type reset 0.U<1>
 : type io_loadingValues 1.PU<1>
 : type io_outputValid 0.U<1>

Does "PU" indicate an explicitly created component, while "U" is
automatically made?  No, io_outputValid seems explicitly made but has
"U"

At some point we'll have to change the error message regex

**** Error
Sorry now settable ports matched regex _GEN_1

*** About poke

We can poke to any component, even registers.  But the pokes into
arbitrary locations don't persist after stepping.  Basically if the
state is "FRESH", all pokes other than to inputs are gone.

**** Components disappear

Some components disappeared after I poked an ephemeral value.  But not
due to the poke.  I reloaded the file, did nothing but step it, and
the same ephemeral components disappeared.

Reloading worked
 : load /home/tehom/projects/ic-fab/ChiselProjects/tryout-chisel/test_run_dir/gcd.GCDRepl900447983/GCD.fir

**** An error from too-wide poke

Error: exception error: ConcreteUInt(72, 4) bad width 4 needs 7 firrtl_interpreter.InterpreterException: error: ConcreteUInt(72, 4) bad width 4 needs 7
**** An error from negative poke

Error: exception error: ConcreteUInt(-1, 4) bad value -1 must be >= 0 firrtl_interpreter.InterpreterException: error: ConcreteUInt(-1, 4) bad value -1 must be >= 0
**** An exception from peek to a gone component

Error: exception Error: getValue(_GEN_0) returns value not found
*** Tree widget doesn't co-operate with widgets

Approaches:
 * Lots more work
 * CHOSEN Let input's action do a dialog instead

**** About it

I had originally intended to just use more widgets for the
interaction, but that doesn't work.  Specifically, it doesn't play
well with the tree expansion widgets.  Widgets that are originally
folded require manual setup, and that setup doesn't go away when they
are re-folded.  So then you get overlapping fields, and that's a big
problem.

So I just resorted to an interaction dialog in the low bar.
*** About enums

This will likely be part of a larger customization about FIRRTL
variables.  

We'd customize:
 * type (enum by name, hex, decimal, binary, boolean)
 * sorting order
 * whether trees start open or folded

By default,
 * io sorts earliest and starts open
 * type includes boolean and hex
 * reset is its own thing (invisible?)
 * clock is its own thing (invisible?)

But "type" applies to individual variables.  It could apply on
patterns too.  But it's never going to apply to inner nodes, as the
other things do.  And you typically wouldn't want to treat type and
the other things together.

Nice to have:
 * Var customizer completes from variables the obarray knows about
 * Store these customizations in the current directory.

**** Development

 * [X] Build and use any converter (say hex or binary with string-to-number)
 * [X] Make a var customizer
 * [X] Apply those customizations to a sym value / to all in the obarray.
 * [X] Use those customizations to display

*** More things to do

 * [X] Add buttons and shortcuts for the functionality (step&show, multistep, reset)
   * Did just one, but the others are basically the same
 * [X] Just if it's input, insert a value modification widget.
   * This strategy won't work, but did it as interaction
 * [X] Allow hex or bin values, and arbitrary user value conversions (enums)
 * [X] Another buffer and structure defining enum value conversions
   * It's a customization.
 * [X] Darker face if it's invalid (:value-face)
 * [ ] Sort them first: alphabetical and input/output/other
   * And by user customization
 * [ ] Pre-open some of them.
   * Easy to do but only nice to have.
 * [X] Add something to save a configuration
   * Really, to save these customizations.  That's basically cloning
     code in cus-edit, with a different means of finding the affected
     variables and a different target file.
   * Or let each circuit be its own entry in a list of customizations.
     But that makes all sorts of code parse that list.
   * Or just save the values straight, and read them back straight.
   * Yes, visit it in a buffer.  As p-sexps does.  Use my tiny-db /
     persist package.
 * [X] Help for getting circuit symbols' names
   * Add the values of a circuit's symbols to the customization
     completions?
     * custom-add-frequent-value doesn't help us
   * Maybe instead a dialog launched by clicking on that symbol?
     * Except firrtl-dbg-do-integer-edit&poke doesn't make that
       distinction.
   * We already have one, but maybe with \C-u launch a different one.
   * Still want the option of using regular expressions to recognize
     components.
   * Maybe another command in the keymap?  And when executed at that
     location, it launches this interaction.
*** Design of editing a symbol's type

This acts, but of course complains that this has no custom-type
property.

 : (customize-option (intern "io_value1" firrtl-dbg-obarray))

Could give each symbol a custom-type.

Also, customize wants to edit its value, which is generally wrong.  

Approaches:
 * Make customize edit its plist instead
   * Con: Can't.
 * Make customize edit its entry in firrtl-dbg-custom-variable-formats
   * Con: Can't launch
   * Con: Can't store
 * Let that symbol's value contain both its current data and its spec.
   * Con: That's really really wrong for saving and restoring it.
 * LEANING_TOWARDS Also intern the same string in another obarray for
   its permanent properties
   * An entry is only needed there if we have set permanent properties
     for it.
   * Con: Doesn't let us do regexps.  But we were really after partial
     component paths.
     * Perhaps each perm symbol lets us get to all regexps or
       paths-with-vars that applied to it.

*** Design of saving/loading circuit-local settings

Approaches:
 * tiny-db
   * Con: It's not naturally a list of symbols & their values.
   * Pro: It works directly.
   * Con: Even this does more than we need
 * Roll our own
   * Con: We'd largely be repeating tiny-db
 * Use dir-locals
   * add-dir-local-variable
   * This works well.  Had to make a mode but that's worth doing.
 * As customize-save
   * Pro: We enter it as customization
   * Fatal con: This has a lot of stuff that assumes symbols.  It's not just obarray.

**** What customize wants to do

  custom-save-all()
  custom-variable-save((custom-variable :documentation-shown t :custom-state modified :tag "Reset" :value reset :custom-form edit :custom-magic (custom-magic :args (nil) :parent #0 :indent 0 :children ((choice-item :help-echo "Change the state of this item." :format "%[%t%]" :button-prefix widget-push-button-prefix :button-suffix widget-push-button-suffix :mouse-down-action widget-magic-mouse-down-action :tag " State " :parent #1 :indent 0 :button-overlay #<overlay from 237 to 244 in *Customize Option: Reset*> :from #<marker (moves after insertion) at 237 in *Customize Option: Reset*> :to #<marker at 244 in *Customize Option: Reset*>)) :from #<marker (moves after insertion) at 234 in *Customize Option: Reset*> :to #<marker at 313 in *Customize Option: Reset*> :buttons nil :value nil) :buttons ((custom-group-link :args nil :value firrtl-dbg :tag "Firrtl Dbg" :parent #0 :indent 0 :button-overlay #<overlay from 338 to 348 in *Customize Option: Reset*> :from #<marker (moves after insertion) at 338 in *Customize Option: Reset*> :to #<marker at 348 in *Customize Option: Reset*>) (documentation-string :args nil :value "The usual doc" :indent 3 :visibility-widget custom-visibility :parent #0 :doc-overlay #<overlay from 313 to 329 in *Customize Option: Reset*> :buttons nil :from #<marker (moves after insertion) at 313 in *Customize Option: Reset*> :to #<marker at 330 in *Customize Option: Reset*>) (custom-magic :args (nil) :parent #0 :indent 0 :children ((choice-item :help-echo "Change the state of this item." :format "%[%t%]" :button-prefix widget-push-button-prefix :button-suffix widget-push-button-suffix :mouse-down-action widget-magic-mouse-down-action :tag " State " :parent #2 :indent 0 :button-overlay #<overlay from 237 to 244 in *Customize Option: Reset*> :from #<marker (moves after insertion) at 237 in *Customize Option: Reset*> :to #<marker at 244 in *Customize Option: Reset*>)) :from #<marker (moves after insertion) at 234 in *Customize Option: Reset*> :to #<marker at 313 in *Customize Option: Reset*> :buttons nil :value nil) (item :args nil :value "Reset" :format "%{%t%}:" :action custom-tag-action :help-echo "Change value of this option." :mouse-down-action custom-tag-mouse-down-action :button-face custom-variable-button :sample-face custom-variable-tag :parent #0 :indent 0 :sample-overlay #<overlay from 208 to 213 in *Customize Option: Reset*> :from #<marker (moves after insertion) at 208 in *Customize Option: Reset*> :to #<marker at 214 in *Customize Option: Reset*>) (custom-visibility :args nil :value t :help-echo "Hide or show this option." :on "Hide" :off "Show" :on-glyph "down" :off-glyph "right" :action custom-toggle-hide-variable :parent #0 :indent 0 :suppress-face t :button-overlay #<overlay from 203 to 207 in *Customize Option: Reset*> :from #<marker (moves after insertion) at 203 in *Customize Option: Reset*> :to #<marker at 207 in *Customize Option: Reset*>)) :documentation-indent 3 :comment-widget (custom-comment :parent #0 :value "" :indent 0 :from #<marker at 330 in *Customize Option: Reset*> :to #<marker at 330 in *Customize Option: Reset*>) :children ((choice :args ((group :args ((const :args nil :value decimal)) :value (decimal)) (group :args ((const :args nil :value boolean))) (group :args ((const :args nil :value hexadecimal))) (group :args ((const :args nil :value enum) (string :value ""))) (group :args ((const :args nil :value base) (integer :value "0")))) :format " %[Value Menu%] %v" :value (boolean) :parent #0 :indent 0 :button-overlay #<overlay from 215 to 225 in *Customize Option: Reset*> :children ((group :args ((const :args nil :value boolean)) :value (boolean) :parent #2 :indent 0 :children ((const :args nil :value boolean :parent #4 :indent 0 :from #<marker (moves after insertion) at 226 in *Customize Option: Reset*> :to #<marker at 234 in *Customize Option: Reset*>)) :from #<marker (moves after insertion) at 226 in *Customize Option: Reset*> :to #<marker at 234 in *Customize Option: Reset*>)) :choice (group :args ((const :args nil :value boolean))) :from #<marker (moves after insertion) at 214 in *Customize Option: Reset*> :to #<marker at 234 in *Customize Option: Reset*> :explicit-choice nil :buttons nil) (custom-comment :parent #0 :value "" :indent 0 :from #<marker at 330 in *Customize Option: Reset*> :to #<marker at 330 in *Customize Option: Reset*>)) :from #<marker (moves after insertion) at 203 in *Customize Option: Reset*> :to #<marker at 349 in *Customize Option: Reset*> :comment-shown nil))
  custom-variable-action((custom-variable :documentation-shown t :custom-state modified :tag "Reset" :value reset :custom-form edit :custom-magic (custom-magic :args (nil) :parent #0 :indent 0 :children ((choice-item :help-echo "Change the state of this item." :format "%[%t%]" :button-prefix widget-push-button-prefix :button-suffix widget-push-button-suffix :mouse-down-action widget-magic-mouse-down-action :tag " State " :parent #1 :indent 0 :button-overlay #<overlay from 237 to 244 in *Customize Option: Reset*> :from #<marker (moves after insertion) at 237 in *Customize Option: Reset*> :to #<marker at 244 in *Customize Option: Reset*>)) :from #<marker (moves after insertion) at 234 in *Customize Option: Reset*> :to #<marker at 313 in *Customize Option: Reset*> :buttons nil :value nil) :buttons ((custom-group-link :args nil :value firrtl-dbg :tag "Firrtl Dbg" :parent #0 :indent 0 :button-overlay #<overlay from 338 to 348 in *Customize Option: Reset*> :from #<marker (moves after insertion) at 338 in *Customize Option: Reset*> :to #<marker at 348 in *Customize Option: Reset*>) (documentation-string :args nil :value "The usual doc" :indent 3 :visibility-widget custom-visibility :parent #0 :doc-overlay #<overlay from 313 to 329 in *Customize Option: Reset*> :buttons nil :from #<marker (moves after insertion) at 313 in *Customize Option: Reset*> :to #<marker at 330 in *Customize Option: Reset*>) (custom-magic :args (nil) :parent #0 :indent 0 :children ((choice-item :help-echo "Change the state of this item." :format "%[%t%]" :button-prefix widget-push-button-prefix :button-suffix widget-push-button-suffix :mouse-down-action widget-magic-mouse-down-action :tag " State " :parent #2 :indent 0 :button-overlay #<overlay from 237 to 244 in *Customize Option: Reset*> :from #<marker (moves after insertion) at 237 in *Customize Option: Reset*> :to #<marker at 244 in *Customize Option: Reset*>)) :from #<marker (moves after insertion) at 234 in *Customize Option: Reset*> :to #<marker at 313 in *Customize Option: Reset*> :buttons nil :value nil) (item :args nil :value "Reset" :format "%{%t%}:" :action custom-tag-action :help-echo "Change value of this option." :mouse-down-action custom-tag-mouse-down-action :button-face custom-variable-button :sample-face custom-variable-tag :parent #0 :indent 0 :sample-overlay #<overlay from 208 to 213 in *Customize Option: Reset*> :from #<marker (moves after insertion) at 208 in *Customize Option: Reset*> :to #<marker at 214 in *Customize Option: Reset*>) (custom-visibility :args nil :value t :help-echo "Hide or show this option." :on "Hide" :off "Show" :on-glyph "down" :off-glyph "right" :action custom-toggle-hide-variable :parent #0 :indent 0 :suppress-face t :button-overlay #<overlay from 203 to 207 in *Customize Option: Reset*> :from #<marker (moves after insertion) at 203 in *Customize Option: Reset*> :to #<marker at 207 in *Customize Option: Reset*>)) :documentation-indent 3 :comment-widget (custom-comment :parent #0 :value "" :indent 0 :from #<marker at 330 in *Customize Option: Reset*> :to #<marker at 330 in *Customize Option: Reset*>) :children ((choice :args ((group :args ((const :args nil :value decimal)) :value (decimal)) (group :args ((const :args nil :value boolean))) (group :args ((const :args nil :value hexadecimal))) (group :args ((const :args nil :value enum) (string :value ""))) (group :args ((const :args nil :value base) (integer :value "0")))) :format " %[Value Menu%] %v" :value (boolean) :parent #0 :indent 0 :button-overlay #<overlay from 215 to 225 in *Customize Option: Reset*> :children ((group :args ((const :args nil :value boolean)) :value (boolean) :parent #2 :indent 0 :children ((const :args nil :value boolean :parent #4 :indent 0 :from #<marker (moves after insertion) at 226 in *Customize Option: Reset*> :to #<marker at 234 in *Customize Option: Reset*>)) :from #<marker (moves after insertion) at 226 in *Customize Option: Reset*> :to #<marker at 234 in *Customize Option: Reset*>)) :choice (group :args ((const :args nil :value boolean))) :from #<marker (moves after insertion) at 214 in *Customize Option: Reset*> :to #<marker at 234 in *Customize Option: Reset*> :explicit-choice nil :buttons nil) (custom-comment :parent #0 :value "" :indent 0 :from #<marker at 330 in *Customize Option: Reset*> :to #<marker at 330 in *Customize Option: Reset*>)) :from #<marker (moves after insertion) at 203 in *Customize Option: Reset*> :to #<marker at 349 in *Customize Option: Reset*> :comment-shown nil) (down-mouse-1 (#<window 49 on *Customize Option: Reset*> 243 (83 . 173) 21371205 nil 243 (9 . 8) nil (0 . 17) (11 . 22))))


It starts from the action of the custom-variable widget.

Not clear how to best intercept that.

customize-option makes it into that widget.  Can we add another action there?

custom-tag-action just passes control to first child of widget's
parents.  We want to replace custom-variable-action.

Nope, we want to replace Custom-save.  And custom-variable-action
shows a user menu, given by custom-variable-menu.  We'd have to change
that menu.  Give it a local value?

**** Getting customize to save it our way

Approaches:
 * Make our own version of that and add a different action there.
   * Con: That code is very, very hairy
 * Find and alter all widgets that have :action 'custom-variable-action
   * That finds none
     * Info: There are 10 buttons, just none of them have this action
     * We didn't find custom-tag-action either
     * The widget type was always 'nil
     * So were the widgets' actions
 * ... that are of type 'custom-variable

*** So to set things script-wise

Approaches:
 * Use their script format
   * Con: It's pretty messy
 * Allow elisp to do that
   * Pro: We are mostly there already.

**** Their script format

I made an example, but inspection doesn't make it that clear.  What it
wrote largely seems to record that I poked 10 and 5 into io_value2 and
io_value1 respectively and in that order.

Seems like it begins each step with "#N", N being a number.  Then the
step seems to record assignments, regardless whether they came from
user.  No peeks, pokes, changes of flags, nothing.

It dumped a bunch of information as a prefix, and gave each wire a
nickname.

There's a "1%" in there somewhere - it's dumping the clock value at
that point?

*** Renamed files
*** To fix: We want perms per circuit, not per directory

*** To do now

Now that I have tried it out, certain things:
 * Important: Some feedback for stepping
 * I really want sorting.
   * io ought to come first
   * I really want io starting open
 * Some sort of regexp setting would be very welcome
 * Scripts run so slowly.  Why?  They don't run that slowly in sbt.
   * Because the rapid input was confusing the REPL, which made
     spurious responses, and emacs slowed down to present those.
     * Fixed

** My circuit

I suspect the problem was that it's still resetting after reset is
turned off at the top.  Better to use the built-in reset that I didn't
know about.  I'll try that before going further.  Then I'll try
chain-of-nested-setters, then actual data.
